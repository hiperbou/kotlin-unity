(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', 'csharp', 'kotlinx-coroutines-core'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('csharp'), require('kotlinx-coroutines-core'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'unity-kotlin'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'unity-kotlin'.");
    }
    if (typeof csharp === 'undefined') {
      throw new Error("Error loading module 'unity-kotlin'. Its dependency 'csharp' was not found. Please, check whether 'csharp' is loaded prior to 'unity-kotlin'.");
    }
    if (typeof this['kotlinx-coroutines-core'] === 'undefined') {
      throw new Error("Error loading module 'unity-kotlin'. Its dependency 'kotlinx-coroutines-core' was not found. Please, check whether 'kotlinx-coroutines-core' is loaded prior to 'unity-kotlin'.");
    }
    root['unity-kotlin'] = factory(typeof this['unity-kotlin'] === 'undefined' ? {} : this['unity-kotlin'], kotlin, csharp, this['kotlinx-coroutines-core']);
  }
}(this, function (_, Kotlin, $module$csharp, $module$kotlinx_coroutines_core) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var coroutines = Kotlin.kotlin.coroutines;
  var startCoroutine = Kotlin.kotlin.coroutines.startCoroutine_x18nsh$;
  var printStackTrace = Kotlin.kotlin.printStackTrace_dbl4o4$;
  var Throwable = Error;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Continuation = Kotlin.kotlin.coroutines.Continuation;
  var throwOnFailure = Kotlin.kotlin.throwOnFailure_iacion$;
  var Any = Object;
  var throwCCE = Kotlin.throwCCE;
  var Debug$Companion = $module$csharp.UnityEngine.Debug;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var GameObject_init = $module$csharp.UnityEngine.GameObject;
  var HelloKotlin$Companion = $module$csharp.UnityKotlin.HelloKotlin;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var L1000 = Kotlin.Long.fromInt(1000);
  var delay = $module$kotlinx_coroutines_core.kotlinx.coroutines.delay_s8cxhz$;
  var Unit = Kotlin.kotlin.Unit;
  var coroutineScope = $module$kotlinx_coroutines_core.kotlinx.coroutines.coroutineScope_awg8ri$;
  var Vector3_init = $module$csharp.UnityEngine.Vector3;
  var L16 = Kotlin.Long.fromInt(16);
  var internal = Kotlin.kotlin.coroutines.js.internal;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Random = Kotlin.kotlin.random.Random;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Input$Companion = $module$csharp.UnityEngine.Input;
  var KeyCode$W = $module$csharp.UnityEngine.KeyCode.W;
  var KeyCode$S = $module$csharp.UnityEngine.KeyCode.S;
  var getCallableRef = Kotlin.getCallableRef;
  var padStart = Kotlin.kotlin.text.padStart_vrc1nu$;
  var Time$Companion = $module$csharp.UnityEngine.Time;
  var KeyCode$UpArrow = $module$csharp.UnityEngine.KeyCode.UpArrow;
  var KeyCode$DownArrow = $module$csharp.UnityEngine.KeyCode.DownArrow;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var JsMath = Math;
  function launch(block) {
    launch_0(block, coroutines.EmptyCoroutineContext);
  }
  function launch_0(block, context) {
    startCoroutine(block, new StandaloneCoroutine(context));
  }
  function StandaloneCoroutine(context) {
    this.context_werskr$_0 = context;
  }
  Object.defineProperty(StandaloneCoroutine.prototype, 'context', {
    get: function () {
      return this.context_werskr$_0;
    }
  });
  StandaloneCoroutine.prototype.resumeWith_tl1gpc$ = function (result) {
    try {
      var tmp$;
      throwOnFailure(result);
      (tmp$ = result.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        printStackTrace(e);
      } else
        throw e;
    }
  };
  StandaloneCoroutine.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StandaloneCoroutine',
    interfaces: [Continuation]
  };
  function println(message) {
    Debug$Companion.Log(message != null ? message : 'null');
  }
  var SetPosition = defineInlineFunction('unity-kotlin.SetPosition_rry3v7$', function ($receiver, position) {
    $receiver.SetPositionAndRotation(position, $receiver.rotation);
  });
  var GetComponent = defineInlineFunction('unity-kotlin.GetComponent_8cg27s$', function ($receiver, $type) {
    return $receiver.GetComponent($type);
  });
  function Coroutine$main$lambda($receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
  }
  Coroutine$main$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$main$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$main$lambda.prototype.constructor = Coroutine$main$lambda;
  Coroutine$main$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var gameObject = new GameObject_init('Hello Kotlin 0.1');
            println(gameObject.name);
            HelloKotlin$Companion.CallStaticFunction(gameObject);
            println(HelloKotlin$Companion.Sum(1.0, 1.0));
            println(HelloKotlin$Companion.Sum(2.0, 2.0));
            println(HelloKotlin$Companion.Sum(4.0, 100.0));
            this.local$tmp$ = (new IntRange(0, 10)).iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            var element = this.local$tmp$.next();
            println('kotlinx-coroutines iteration ' + element + '!');
            this.state_0 = 3;
            this.result_0 = delay(L1000, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return println('kotlinx-coroutines exiting main!'), Unit;
          default:
            this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function main$lambda($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$main$lambda($receiver_0, this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function main(continuation) {
    return coroutineScope(main$lambda, continuation);
  }
  function greet() {
    return 'Kotlin';
  }
  function greetByName(name) {
    return 'Hello ' + name + '!';
  }
  function Coroutine$useInstance$lambda(closure$instance_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$instance = closure$instance_0;
  }
  Coroutine$useInstance$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$useInstance$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$useInstance$lambda.prototype.constructor = Coroutine$useInstance$lambda;
  Coroutine$useInstance$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = moveCamera(this.local$closure$instance, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:
            this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function useInstance$lambda(closure$instance_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$useInstance$lambda(closure$instance_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function useInstance(instance) {
    println('useInstance');
    println(instance);
    var result = instance.CSharpCall('Kotlin');
    println(result);
    launch(useInstance$lambda(instance));
  }
  function Coroutine$moveCamera(instance_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$instance = instance_0;
  }
  Coroutine$moveCamera.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$moveCamera.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$moveCamera.prototype.constructor = Coroutine$moveCamera;
  Coroutine$moveCamera.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            println('moveCamera');
            this.local$tmp$ = (new IntRange(0, 120)).iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }

            var element = this.local$tmp$.next();
            var $receiver = this.local$instance.gameObject.transform;
            $receiver.SetPositionAndRotation(new Vector3_init(element / 10.0, 0, 0), $receiver.rotation);
            this.state_0 = 3;
            this.result_0 = delay(L16, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return;
          default:
            this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function moveCamera(instance_0, continuation_0, suspended) {
    var instance_1 = new Coroutine$moveCamera(instance_0, continuation_0);
    if (suspended)
      return instance_1;
    else
      return instance_1.doResume(null);
  }
  function PongRules() {
    PongRules_instance = this;
    this.top = -5.0;
    this.bottom = 5.0;
    this.left = -7.0;
    this.right = 7.0;
    this.paddleHalfHeight = 1.0;
    this.paddleWidth = 0.5;
    this.maxBallSpeedX = 20.0;
    this.maxBallSpeedY = 5.0;
    this.ballSpeedMultiplier = 1.1;
    this.initialBallSpeedX = 3.0;
    this.initialBallSpeedY = 3.0;
  }
  PongRules.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'PongRules',
    interfaces: []
  };
  var PongRules_instance = null;
  function PongRules_getInstance() {
    if (PongRules_instance === null) {
      new PongRules();
    }
    return PongRules_instance;
  }
  function randomSign() {
    return Random.Default.nextFloat() > 0.5 ? 1 : -1;
  }
  function Updatable() {
  }
  Updatable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Updatable',
    interfaces: []
  };
  function PaddleController(moveUp, moveDown) {
    if (moveUp === void 0)
      moveUp = KeyCode$W;
    if (moveDown === void 0)
      moveDown = KeyCode$S;
    this.moveUp_0 = moveUp;
    this.moveDown_0 = moveDown;
    this.onMove = PaddleController$onMove$lambda;
  }
  PaddleController.prototype.update_mx4ult$ = function (deltaTime) {
    this.onMove(Input$Companion.GetKey(this.moveUp_0) ? -1 : Input$Companion.GetKey(this.moveDown_0) ? 1 : 0);
  };
  function PaddleController$onMove$lambda(it) {
    return Unit;
  }
  PaddleController.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PaddleController',
    interfaces: [Updatable]
  };
  function IPongGameObject() {
  }
  IPongGameObject.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'IPongGameObject',
    interfaces: [Updatable]
  };
  function PongGameObject(gameObject) {
    this.gameObject = gameObject;
    this.x_wlp1vr$_0 = this.gameObject.transform.position.x;
    this.y_wlp1wm$_0 = this.gameObject.transform.position.y;
    this.speedX_a22c90$_0 = 0.0;
    this.speedY_a22c9v$_0 = 0.0;
    this.trailRenderer_0 = this.gameObject.GetComponent('TrailRenderer');
  }
  Object.defineProperty(PongGameObject.prototype, 'x', {
    configurable: true,
    get: function () {
      return this.x_wlp1vr$_0;
    },
    set: function (x) {
      this.x_wlp1vr$_0 = x;
    }
  });
  Object.defineProperty(PongGameObject.prototype, 'y', {
    configurable: true,
    get: function () {
      return this.y_wlp1wm$_0;
    },
    set: function (y) {
      this.y_wlp1wm$_0 = y;
    }
  });
  Object.defineProperty(PongGameObject.prototype, 'speedX', {
    configurable: true,
    get: function () {
      return this.speedX_a22c90$_0;
    },
    set: function (speedX) {
      this.speedX_a22c90$_0 = speedX;
    }
  });
  Object.defineProperty(PongGameObject.prototype, 'speedY', {
    configurable: true,
    get: function () {
      return this.speedY_a22c9v$_0;
    },
    set: function (speedY) {
      this.speedY_a22c9v$_0 = speedY;
    }
  });
  PongGameObject.prototype.update_mx4ult$ = function (deltaTime) {
    this.x = this.x + this.speedX * deltaTime;
    this.y = this.y - this.speedY * deltaTime;
    this.updateGameObject_0();
  };
  PongGameObject.prototype.updateGameObject_0 = function () {
    var $receiver = this.gameObject.transform;
    $receiver.SetPositionAndRotation(new Vector3_init(this.x, this.y, 0), $receiver.rotation);
  };
  PongGameObject.prototype.setPosition_dleff0$ = function (x, y) {
    this.x = x;
    this.y = y;
    this.clearTrail_0();
  };
  PongGameObject.prototype.clearTrail_0 = function () {
    this.trailRenderer_0.enabled = false;
    this.trailRenderer_0.Clear();
    this.trailRenderer_0.enabled = true;
  };
  PongGameObject.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PongGameObject',
    interfaces: [IPongGameObject]
  };
  function Paddle(pongGameObject, paddleController, ball) {
    this.pongGameObject_0 = pongGameObject;
    this.paddleController_0 = paddleController;
    this.ball_0 = ball;
    this.paddleController_0.onMove = getCallableRef('updateMovement', function ($receiver, p1) {
      return $receiver.updateMovement_0(p1), Unit;
    }.bind(null, this));
    this.paddleSpeed_0 = 10.0;
  }
  Paddle.prototype.update_mx4ult$ = function (deltaTime) {
    this.paddleController_0.update_mx4ult$(deltaTime);
    this.pongGameObject_0.update_mx4ult$(deltaTime);
    this.checkWalls_0();
    this.checkBallCollision_0();
  };
  Paddle.prototype.updateMovement_0 = function (direction) {
    this.pongGameObject_0.speedY = this.paddleSpeed_0 * direction;
  };
  Paddle.prototype.checkWalls_0 = function () {
    var $receiver = this.pongGameObject_0;
    if ($receiver.y + PongRules_getInstance().paddleHalfHeight > PongRules_getInstance().bottom || $receiver.y - PongRules_getInstance().paddleHalfHeight < PongRules_getInstance().top) {
      $receiver.speedY = 0.0;
      var tmp$ = PongRules_getInstance().bottom - PongRules_getInstance().paddleHalfHeight;
      var a = PongRules_getInstance().top + PongRules_getInstance().paddleHalfHeight;
      var b = $receiver.y;
      var b_0 = JsMath.max(a, b);
      $receiver.y = JsMath.min(tmp$, b_0);
      this.pongGameObject_0.update_mx4ult$(0.0);
    }
  };
  Paddle.prototype.checkBallCollision_0 = function () {
    var $receiver = this.pongGameObject_0;
    if (this.ball_0.speedX > 0 && $receiver.x < this.ball_0.x)
      return;
    if (this.ball_0.speedX < 0 && $receiver.x > this.ball_0.x)
      return;
    if (this.ball_0.y < $receiver.y - PongRules_getInstance().paddleHalfHeight || this.ball_0.y > $receiver.y + PongRules_getInstance().paddleHalfHeight)
      return;
    var x = $receiver.x - this.ball_0.x;
    if (JsMath.abs(x) < PongRules_getInstance().paddleWidth) {
      var tmp$ = this.ball_0;
      var a = this.ball_0.speedX * PongRules_getInstance().ballSpeedMultiplier;
      var b = PongRules_getInstance().maxBallSpeedX;
      tmp$.speedX = JsMath.min(a, b) * -1;
      this.ball_0.speedY = ($receiver.y - this.ball_0.y) * PongRules_getInstance().maxBallSpeedY;
    }
  };
  Object.defineProperty(Paddle.prototype, 'speedX', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.speedX;
    },
    set: function (tmp$) {
      this.pongGameObject_0.speedX = tmp$;
    }
  });
  Object.defineProperty(Paddle.prototype, 'speedY', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.speedY;
    },
    set: function (tmp$) {
      this.pongGameObject_0.speedY = tmp$;
    }
  });
  Object.defineProperty(Paddle.prototype, 'x', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.x;
    },
    set: function (tmp$) {
      this.pongGameObject_0.x = tmp$;
    }
  });
  Object.defineProperty(Paddle.prototype, 'y', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.y;
    },
    set: function (tmp$) {
      this.pongGameObject_0.y = tmp$;
    }
  });
  Paddle.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Paddle',
    interfaces: [IPongGameObject, Updatable]
  };
  function Ball(pongGameObject, onBallReachedGoal) {
    this.pongGameObject_0 = pongGameObject;
    this.onBallReachedGoal = onBallReachedGoal;
  }
  Ball.prototype.start = function () {
    var $receiver = this.pongGameObject_0;
    $receiver.setPosition_dleff0$(0.0, 0.0);
    $receiver.speedX = (Random.Default.nextFloat() > 0.5 ? 1 : -1) * PongRules_getInstance().initialBallSpeedX;
    $receiver.speedY = (Random.Default.nextFloat() > 0.5 ? 1 : -1) * PongRules_getInstance().initialBallSpeedY;
  };
  Ball.prototype.update_mx4ult$ = function (deltaTime) {
    this.checkWalls_0();
    this.checkGoal_0();
    this.pongGameObject_0.update_mx4ult$(deltaTime);
  };
  Ball.prototype.checkGoal_0 = function () {
    var $receiver = this.pongGameObject_0;
    if ($receiver.x > PongRules_getInstance().right || $receiver.x < PongRules_getInstance().left) {
      this.onBallReachedGoal(this);
    }
  };
  Ball.prototype.checkWalls_0 = function () {
    var $receiver = this.pongGameObject_0;
    if ($receiver.y > PongRules_getInstance().bottom || $receiver.y < PongRules_getInstance().top) {
      $receiver.speedY = $receiver.speedY * -1;
      var tmp$ = PongRules_getInstance().bottom;
      var a = PongRules_getInstance().top;
      var b = $receiver.y;
      var b_0 = JsMath.max(a, b);
      $receiver.y = JsMath.min(tmp$, b_0);
    }
  };
  Object.defineProperty(Ball.prototype, 'speedX', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.speedX;
    },
    set: function (tmp$) {
      this.pongGameObject_0.speedX = tmp$;
    }
  });
  Object.defineProperty(Ball.prototype, 'speedY', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.speedY;
    },
    set: function (tmp$) {
      this.pongGameObject_0.speedY = tmp$;
    }
  });
  Object.defineProperty(Ball.prototype, 'x', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.x;
    },
    set: function (tmp$) {
      this.pongGameObject_0.x = tmp$;
    }
  });
  Object.defineProperty(Ball.prototype, 'y', {
    configurable: true,
    get: function () {
      return this.pongGameObject_0.y;
    },
    set: function (tmp$) {
      this.pongGameObject_0.y = tmp$;
    }
  });
  Ball.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Ball',
    interfaces: [IPongGameObject, Updatable]
  };
  function UI(scene, matchState) {
    this.matchState_0 = matchState;
    this.leftScore_0 = scene.LeftScore.GetComponent('Text');
    this.rightScore_0 = scene.RightScore.GetComponent('Text');
    this.updateScores();
  }
  UI.prototype.updateScores = function () {
    this.leftScore_0.text = this.formatScore_0(this.matchState_0.leftScore);
    this.rightScore_0.text = this.formatScore_0(this.matchState_0.rightScore);
  };
  UI.prototype.formatScore_0 = function ($receiver) {
    return padStart($receiver.toString(), 2, 48);
  };
  UI.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UI',
    interfaces: []
  };
  function MatchState() {
    this.leftScore = 0;
    this.rightScore = 0;
  }
  MatchState.prototype.reset = function () {
    this.leftScore = 0;
    this.rightScore = 0;
  };
  MatchState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MatchState',
    interfaces: []
  };
  function Match(matchState, ui) {
    this.matchState_0 = matchState;
    this.ui_0 = ui;
  }
  Match.prototype.start_187q7$ = function (ball) {
    this.matchState_0.reset();
    ball.start();
  };
  Match.prototype.onBallReachedGoal_187q7$ = function (ball) {
    if (ball.x > 0) {
      var tmp$;
      tmp$ = this.matchState_0;
      tmp$.leftScore = tmp$.leftScore + 1 | 0;
    } else {
      var tmp$_0;
      tmp$_0 = this.matchState_0;
      tmp$_0.rightScore = tmp$_0.rightScore + 1 | 0;
    }
    this.ui_0.updateScores();
    ball.start();
  };
  Match.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Match',
    interfaces: []
  };
  function Pong(scene) {
    this.scene = scene;
    this.matchState_0 = new MatchState();
    this.ui_0 = new UI(this.scene, this.matchState_0);
    this.match_0 = new Match(this.matchState_0, this.ui_0);
    this.ball_0 = new Ball(new PongGameObject(this.scene.Ball), getCallableRef('onBallReachedGoal', function ($receiver, p1) {
      return $receiver.onBallReachedGoal_187q7$(p1), Unit;
    }.bind(null, this.match_0)));
    this.paddle1_0 = new Paddle(new PongGameObject(this.scene.Paddle1), new PaddleController(), this.ball_0);
    this.paddle2_0 = new Paddle(new PongGameObject(this.scene.Paddle2), new PaddleController(KeyCode$UpArrow, KeyCode$DownArrow), this.ball_0);
    this.updatable_0 = listOf([this.ball_0, this.paddle1_0, this.paddle2_0]);
    this.scene.updatePong = getCallableRef('update', function ($receiver) {
      return $receiver.update(), Unit;
    }.bind(null, this));
    this.match_0.start_187q7$(this.ball_0);
  }
  Pong.prototype.update = function () {
    var deltaTime = Time$Companion.deltaTime;
    var tmp$;
    tmp$ = this.updatable_0.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.update_mx4ult$(deltaTime);
    }
  };
  Pong.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Pong',
    interfaces: []
  };
  function initPong(scene) {
    new Pong(scene);
  }
  var package$com = _.com || (_.com = {});
  var package$hiperbou = package$com.hiperbou || (package$com.hiperbou = {});
  var package$unity = package$hiperbou.unity || (package$hiperbou.unity = {});
  var package$coroutines = package$unity.coroutines || (package$unity.coroutines = {});
  package$coroutines.launch_g2bo5h$ = launch;
  package$coroutines.launch_bacyg4$ = launch_0;
  _.println_s8jyv4$ = println;
  _.SetPosition_rry3v7$ = SetPosition;
  _.GetComponent_8cg27s$ = GetComponent;
  _.main = main;
  _.greet = greet;
  _.greetByName = greetByName;
  _.useInstance = useInstance;
  $$importsForInline$$['unity-kotlin'] = _;
  _.moveCamera_o98sb0$ = moveCamera;
  Object.defineProperty(_, 'PongRules', {
    get: PongRules_getInstance
  });
  _.Updatable = Updatable;
  _.PaddleController = PaddleController;
  _.IPongGameObject = IPongGameObject;
  _.PongGameObject = PongGameObject;
  _.Paddle = Paddle;
  _.Ball = Ball;
  _.UI = UI;
  _.MatchState = MatchState;
  _.Match = Match;
  _.Pong = Pong;
  _.initPong = initPong;
  main(internal.EmptyContinuation, false);
  Kotlin.defineModule('unity-kotlin', _);
  return _;
}));

//# sourceMappingURL=unity-kotlin.js.map
